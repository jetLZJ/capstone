events {}

http {
    upstream api_backend {
        zone backend_zone 64k;
        keepalive 16;

        server flask-primary:5000 max_fails=3 fail_timeout=10s;
        server flask-secondary:5000 backup;

        # Enable active health checks using the ngx_http_healthcheck_module when available.
        # For OSS nginx we rely on passive health checks via max_fails/fail_timeout along
        # with the proxy_next_upstream directives configured below.
    }

    server {
        listen 8080;

        proxy_connect_timeout 5s;
        proxy_read_timeout 30s;
        proxy_send_timeout 30s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 10s;
        proxy_next_upstream_tries 3;

        location /api/ {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_redirect http://localhost/ /;
            proxy_redirect http://proxyserver/ /;
            proxy_redirect default;
        }

        location /healthz {
            access_log off;
            return 200 "proxy ok\n";
        }

        location /backend_status {
            access_log off;
            stub_status;
        }
    }
}
